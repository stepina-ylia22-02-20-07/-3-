import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token="7618332820:AAGddQyYTTJqVZkibtrcwvAskWTdTAYzx3E")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –í–∞—à API-–∫–ª—é—á –æ—Ç Unsplash
UNSPLASH_API_KEY = "AXg_aECrE8IObZN_wwtYlXFLGtX7_1oyeDe3sfOC5t8"


def get_image_url(query):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∑–∞–ø—Ä–æ—Å—É
        if query.lower() in ["–º–µ—Ä–∫—É—Ä–∏–π", "–≤–µ–Ω–µ—Ä–∞", "–∑–µ–º–ª—è", "–º–∞—Ä—Å"]:
            query = f"–ø–ª–∞–Ω–µ—Ç–∞ {query}"
        elif query.lower() in ["—Ç–∏–≥—Ä", "–ª–µ–≤", "–ª–µ–æ–ø–∞—Ä–¥"]:
            query = f"–∂–∏–≤–æ—Ç–Ω–æ–µ {query}"

        url = "https://api.unsplash.com/search/photos"
        headers = {
            "Authorization": f"Client-ID {UNSPLASH_API_KEY}"
        }
        params = {
            "query": query,  # –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
            "per_page": 1,   # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        }
        response = requests.get(url, headers=headers, params=params)
        data = response.json()

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Unsplash API: {data}")

        if data.get("results"):
            return data["results"][0]["urls"]["regular"]  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        else:
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Unsplash API: {e}")
        return None


age = ["–ú–µ–Ω—å—à–µ 6", "–û—Ç 6 –¥–æ 12", "–û—Ç 12 –¥–æ 16", "–û—Ç 16 –¥–æ 18",
       "–û—Ç 18 –¥–æ 25", "–û—Ç 25 –¥–æ 35", "–û—Ç 35 –¥–æ 45",
       "–û—Ç 45 –¥–æ 60", "–û—Ç 60 –¥–æ 70", "–û—Ç 70 –¥–æ 80",
       "–û—Ç 80 –¥–æ 100", "–ë–æ–ª—å—à–µ 100"]

country = [
    "üá∫üá∏ –°–®–ê", "üá∑üá∫ –†–æ—Å—Å–∏—è", "üáµüá± –ü–æ–ª—å—à–∞", "üá®üá≥ –ö–∏—Ç–∞–π", "üá¶üáΩ –®–≤–µ—Ü–∏—è",
    "üá¶üá≤ –ê—Ä–º–µ–Ω–∏—è", "üá®üáø –ß–µ—Ö–∏—è", "üá©üá∞ –î–∞–Ω–∏—è", "üáØüá¥ –ü–∞–ª–µ—Å—Ç–∏–Ω–∞", "üá™üá™ –≠—Å—Ç–æ–Ω–∏—è",
    "üá™üá¨ –ï–≥–∏–ø–µ—Ç", "üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å", "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è", "üá®üá¶ –ö–∞–Ω–∞–¥–∞", "üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è",
    "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "üá¨üá∑ –ì—Ä–µ—Ü–∏—è", "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", "üá¨üá™ –ì—Ä—É–∑–∏—è", "üáßüá¨ –ë–æ–ª–≥–∞—Ä–∏—è",
    "üá∑üá¥ –†—É–º—ã–Ω–∏—è", "üáπüá∑ –¢—É—Ä—Ü–∏—è", "üáÆüáπ –ò—Ç–∞–ª–∏—è", "üá∏üá∞ –°–ª–æ–≤–∞–∫–∏—è", "üá∏üá¶ –°–∞—É–¥–æ–≤—Å–∫–∞—è –∞—Ä–∞–≤–∏—è"
]

gender = ["‚ôÇ –ú—É–∂—á–∏–Ω–∞", "‚ôÄ –ñ–µ–Ω—â–∏–Ω–∞"]

person = []

right_answer = 0
wrong_answer = 0


def get_db_connection():
    conn = sqlite3.connect('quiz.db')
    conn.row_factory = sqlite3.Row
    return conn


def get_random_question(theme, used_questions):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ
        if used_questions:
            placeholders = ','.join('?' for _ in used_questions)
            query = f'''
            SELECT id, question_text, correct_answer FROM questions
            WHERE theme = ? AND id NOT IN ({placeholders})
            ORDER BY RANDOM() LIMIT 1
            '''
            cursor.execute(query, (theme, *used_questions))
        else:
            cursor.execute('''
            SELECT id, question_text, correct_answer FROM questions
            WHERE theme = ?
            ORDER BY RANDOM() LIMIT 1
            ''', (theme,))

        question = cursor.fetchone()

        if question:
            question_id, question_text, correct_answer = question

            cursor.execute('''
            SELECT option_text FROM options WHERE question_id = ?
            ''', (question_id,))
            options = [row['option_text'] for row in cursor.fetchall()]

            conn.close()
            return {
                'id': question_id,
                'question': question_text,
                'options': options,
                'correct_answer': correct_answer
            }
        conn.close()
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return None


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–î–∞"),
            types.KeyboardButton(text="–ù–µ—Ç")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ó–∞–ø–æ–ª–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É"
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                         reply_markup=keyboard)


@dp.message(F.text == "–î–∞")
async def age_quiz(message: types.Message):
    builder = ReplyKeyboardBuilder()
    for age_option in age:
        builder.add(types.KeyboardButton(text=age_option))
    builder.adjust(4)
    await message.answer(
        "–ö–∞–∫–æ–π —É –í–∞—Å –≤–æ–∑—Ä–∞—Å—Ç?",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


@dp.message(F.text == "–ù–µ—Ç")
async def age_quiz(message: types.Message):
    await message.reply("–ï—Å–ª–∏ –≤—Å–µ-—Ç–∞–∫–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å, —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º –í–∞—Å!",
                        reply_markup=types.ReplyKeyboardRemove())


@dp.message(F.text.in_(age))
async def countries_quiz(message: types.Message):
    person.append(str(message.text))
    builder = ReplyKeyboardBuilder()
    for country_option in country:
        builder.add(types.KeyboardButton(text=country_option))
    builder.adjust(5)
    await message.answer(
        "–ò–∑ –∫–∞–∫–æ–π –í—ã —Å—Ç—Ä–∞–Ω—ã?",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


@dp.message(F.text.in_(country))
async def gender_quiz(message: types.Message):
    person.append(str(message.text))
    builder = ReplyKeyboardBuilder()
    for gender_option in gender:
        builder.add(types.KeyboardButton(text=gender_option))
    builder.adjust(2)
    await message.answer("–ö–∞–∫–æ–≥–æ –í—ã –ø–æ–ª–∞?", reply_markup=builder.as_markup(one_time_keyboard=True))


@dp.message(F.text.in_(gender))
async def start_game(message: types.Message):
    person.append(str(message.text))
    kb = [
        [
            types.KeyboardButton(text="–î–∞, –¥–∞–≤–∞–π—Ç–µ!"),
            types.KeyboardButton(text="–ù–µ—Ç, –Ω–µ —Å—Ç–æ–∏—Ç.")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É?"
    )
    await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø—Ä–æ—Å –æ–∫–æ–Ω—á–µ–Ω, –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ", reply_markup=keyboard)


@dp.message(F.text == "–î–∞, –¥–∞–≤–∞–π—Ç–µ!")
async def start_quiz(message: types.Message):
    builder = ReplyKeyboardBuilder()
    for category in ["–ñ–∏–≤–æ—Ç–Ω—ã–µ", "–ö–æ—Å–º–æ—Å", "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏", "–§–∏–ª—å–º—ã", "–ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏", "–û—Ç–≤–µ—Ç—ã –≤ –æ–ø—Ä–æ—Å–µ"]:
        builder.add(types.KeyboardButton(text=category))
    builder.adjust(4)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –æ —Å–≤–æ–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )


@dp.message(F.text == "–û—Ç–≤–µ—Ç—ã –≤ –æ–ø—Ä–æ—Å–µ")
async def show_survey_results(message: types.Message):
    await message.answer(f"–¢–∞–∫ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ –∞–Ω–∫–µ—Ç–µ: \n"
                         f"–í–æ–∑—Ä–∞—Å—Ç: {person[0]} \n"
                         f"–°—Ç—Ä–∞–Ω–∞: {person[1]} \n"
                         f"–ü–æ–ª: {person[2]}")


@dp.message(F.text == "–ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏")
async def show_results(message: types.Message):
    await message.answer(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \n"
                         f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {right_answer} \n"
                         f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong_answer}")


@dp.message(F.text.in_(["–ñ–∏–≤–æ—Ç–Ω—ã–µ", "–ö–æ—Å–º–æ—Å", "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏", "–§–∏–ª—å–º—ã"]))
async def category_selected(message: types.Message, state: FSMContext):
    theme = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    await state.update_data(theme=theme, used_questions=[])

    await ask_question(message, state)


async def ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    theme = data.get("theme")
    used_questions = data.get("used_questions", [])

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    logging.info(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {theme}, –ó–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {used_questions}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ
    question_data = get_random_question(theme, used_questions)

    if question_data:
        question_text = question_data['question']
        options = question_data['options']

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        builder = InlineKeyboardBuilder()
        for option in options:
            builder.add(InlineKeyboardButton(text=option, callback_data=f"answer:{option}"))
        builder.adjust(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        used_questions.append(question_data['id'])
        await state.update_data(used_questions=used_questions)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(correct_answer=question_data['correct_answer'])

        await message.answer(f"–í–æ–ø—Ä–æ—Å: {question_text}", reply_markup=builder.as_markup())
    else:
        await message.answer("–í–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
        await state.clear()


@dp.callback_query(lambda c: c.data.startswith("answer:"))
async def process_answer(callback_query: types.CallbackQuery, state: FSMContext):
    user_answer = callback_query.data.split(":")[1]  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    data = await state.get_data()
    correct_answer = data.get("correct_answer")

    if user_answer == correct_answer:
        await callback_query.message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await callback_query.message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    image_url = get_image_url(correct_answer)

    if image_url:
        await callback_query.message.answer_photo(
            photo=image_url,
            caption=f"–í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è '{correct_answer}':"
        )
    else:
        await callback_query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await ask_question(callback_query.message, state)


@dp.message(F.text == "–ù–µ—Ç, –Ω–µ —Å—Ç–æ–∏—Ç.")
async def without_puree(message: types.Message):
    await message.reply("–¢—ã –º–Ω–æ–≥–æ–µ —É–ø—É—Å–∫–∞–µ—à—å!",
                        reply_markup=types.ReplyKeyboardRemove())


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
